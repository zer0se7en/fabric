// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/hyperledger/fabric/internal/pkg/gateway/commit"
)

type Eventer struct {
	ChaincodeEventsStub        func(context.Context, string, string) (<-chan *commit.BlockChaincodeEvents, error)
	chaincodeEventsMutex       sync.RWMutex
	chaincodeEventsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	chaincodeEventsReturns struct {
		result1 <-chan *commit.BlockChaincodeEvents
		result2 error
	}
	chaincodeEventsReturnsOnCall map[int]struct {
		result1 <-chan *commit.BlockChaincodeEvents
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Eventer) ChaincodeEvents(arg1 context.Context, arg2 string, arg3 string) (<-chan *commit.BlockChaincodeEvents, error) {
	fake.chaincodeEventsMutex.Lock()
	ret, specificReturn := fake.chaincodeEventsReturnsOnCall[len(fake.chaincodeEventsArgsForCall)]
	fake.chaincodeEventsArgsForCall = append(fake.chaincodeEventsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ChaincodeEventsStub
	fakeReturns := fake.chaincodeEventsReturns
	fake.recordInvocation("ChaincodeEvents", []interface{}{arg1, arg2, arg3})
	fake.chaincodeEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Eventer) ChaincodeEventsCallCount() int {
	fake.chaincodeEventsMutex.RLock()
	defer fake.chaincodeEventsMutex.RUnlock()
	return len(fake.chaincodeEventsArgsForCall)
}

func (fake *Eventer) ChaincodeEventsCalls(stub func(context.Context, string, string) (<-chan *commit.BlockChaincodeEvents, error)) {
	fake.chaincodeEventsMutex.Lock()
	defer fake.chaincodeEventsMutex.Unlock()
	fake.ChaincodeEventsStub = stub
}

func (fake *Eventer) ChaincodeEventsArgsForCall(i int) (context.Context, string, string) {
	fake.chaincodeEventsMutex.RLock()
	defer fake.chaincodeEventsMutex.RUnlock()
	argsForCall := fake.chaincodeEventsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Eventer) ChaincodeEventsReturns(result1 <-chan *commit.BlockChaincodeEvents, result2 error) {
	fake.chaincodeEventsMutex.Lock()
	defer fake.chaincodeEventsMutex.Unlock()
	fake.ChaincodeEventsStub = nil
	fake.chaincodeEventsReturns = struct {
		result1 <-chan *commit.BlockChaincodeEvents
		result2 error
	}{result1, result2}
}

func (fake *Eventer) ChaincodeEventsReturnsOnCall(i int, result1 <-chan *commit.BlockChaincodeEvents, result2 error) {
	fake.chaincodeEventsMutex.Lock()
	defer fake.chaincodeEventsMutex.Unlock()
	fake.ChaincodeEventsStub = nil
	if fake.chaincodeEventsReturnsOnCall == nil {
		fake.chaincodeEventsReturnsOnCall = make(map[int]struct {
			result1 <-chan *commit.BlockChaincodeEvents
			result2 error
		})
	}
	fake.chaincodeEventsReturnsOnCall[i] = struct {
		result1 <-chan *commit.BlockChaincodeEvents
		result2 error
	}{result1, result2}
}

func (fake *Eventer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.chaincodeEventsMutex.RLock()
	defer fake.chaincodeEventsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Eventer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
